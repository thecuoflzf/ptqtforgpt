# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'webb.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtWebEngineWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.uic import loadUi
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtPrintSupport import *

import os
import sys

class AboutDialog(QDialog):
    def __init__(self, *args, **kwargs):
        super(AboutDialog, self).__init__(*args, **kwargs)
        QBtn = QDialogButtonBox.Ok  # No cancel
        self.buttonBox = QDialogButtonBox(QBtn)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        layout = QVBoxLayout()
        title = QLabel("Mozarella Ashbadger")
        font = title.font()
        font.setPointSize(20)
        title.setFont(font)
        layout.addWidget(title)
        logo = QLabel()
        logo.setPixmap(QPixmap(os.path.join('images', 'ma-icon-128.png')))
        layout.addWidget(logo)
        layout.addWidget(QLabel("Version 23.35.211.233232"))
        layout.addWidget(QLabel("Copyright 2015 Mozarella Inc."))
        for i in range(0, layout.count()):
            layout.itemAt(i).setAlignment(Qt.AlignHCenter)
        layout.addWidget(self.buttonBox)
        self.setLayout(layout)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(726, 553)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 80, 141, 50))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 180, 141, 50))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.on_pushButton_2_clicked)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 230, 141, 50))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.on_pushButton_3_clicked)

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 280, 141, 50))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.on_pushButton_4_clicked)

        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(20, 330, 141, 50))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.on_pushButton_5_clicked)

        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 380, 141, 50))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.on_pushButton_6_clicked)

        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(20, 430, 141, 50))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.open)  # 调用open实例方法--用来打开其他窗口

        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(250, 500, 300, 30))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(MainWindow.close)  # 调用open实例方法--用来打开其他窗口

        self.browser1 = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.browser1.setGeometry(QtCore.QRect(190, 50, 491, 441))
        # self.browser1.setUrl(QtCore.QUrl("https://www.baidu.com/"))

        html_code = '''<!DOCTYPE html>
        <html>
        <head>
        	<meta charset="UTF-8">
        	<title>模型介绍</title>
        	<style>
        		body {
        			font-family: Arial, sans-serif;
        			background-color: #f2f2f2;
        		}
        		h1 {
        			text-align: center;
        			color: #333;
        		}
        		p {
        			color: #666;
        			line-height: 1.7;
        			margin-bottom: 12px;
        		}
        	</style>
        </head>
        <body>
        	<h1>模型介绍</h1>
        	<p>由于被试数量较少，使用留一交叉验证（Leave One Out Cross Validation，LOOCV）对正常人组中的每个被试进行预测。在每次预测中，取出正常人组的一个被试作为测试集，其他被试作为训练集，训练集的标签为被试的年龄。模型通过训练数据自动预测出测试集被试的BCA值，然后重置模型并取出下一个被试作为测试集数据，重复以上步骤，直到所有正常被试得到相应的BCA值。</p>
        	<p>当正常人组的ChA与BCA值可以拟合在y=x直线附近（或者说ChA与BCA值没有显著差异）时，代表模型可行。在模型可行的基础上，将所有正常人的数据用作训练集，正常人的年龄设为标签，所有ASD患者的数据用作测试集，通过训练正常人的数据来获得所有ASD患者的BCA值。</p>
        	<p>本实验的结果准确性以ASD患者组的BCA与ChA的r2_score为判定标准。</p>
        </body>
        </html>'''

        self.browser1.setHtml(html_code)
        self.browser1.setObjectName("browser1")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 726, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "模型介绍"))
        self.pushButton_2.setText(_translate("MainWindow", "SVR"))
        self.pushButton_3.setText(_translate("MainWindow", "SVM"))
        self.pushButton_4.setText(_translate("MainWindow", "RFECV"))
        self.pushButton_5.setText(_translate("MainWindow", "LOOCV"))
        self.pushButton_6.setText(_translate("MainWindow", "REGRESSION"))
        self.pushButton_7.setText(_translate("MainWindow", "其他"))
        self.pushButton_8.setText(_translate("MainWindow", "关闭"))
    def on_pushButton_2_clicked(self):
        self.browser1.setUrl(QtCore.QUrl("https://blog.csdn.net/qq_52785473/article/details/122577569/"))

    def on_pushButton_3_clicked(self):
        self.browser1.setUrl(QtCore.QUrl("https://blog.csdn.net/qq_42780025/article/details/92397765/"))

    def on_pushButton_4_clicked(self):
        self.browser1.setUrl(QtCore.QUrl("https://blog.csdn.net/ws19920726/article/details/105526541/"))

    def on_pushButton_5_clicked(self):
        self.browser1.setUrl(QtCore.QUrl("https://zhuanlan.zhihu.com/p/156657195/"))

    def on_pushButton_6_clicked(self):
        self.browser1.setUrl(QtCore.QUrl("https://zhuanlan.zhihu.com/p/127972563"))

    def on_pushButton_1_clicked(self,html_code):
        self.browser1.setHtml(html_code)


    def open(self):
        import browser_tabbed

        self.one = browser_tabbed.MainWindow()
        self.one.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainwindow = QMainWindow()
    # 导入主控界面
    ui = Ui_MainWindow()
    # 导入控件
    ui.setupUi(mainwindow)
    mainwindow.show()
    sys.exit(app.exec())
